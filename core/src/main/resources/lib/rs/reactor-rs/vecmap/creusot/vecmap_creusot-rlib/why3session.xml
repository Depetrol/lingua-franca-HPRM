<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Z3" version="4.8.12" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.1" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="mlcfg" proved="true">
<path name=".."/><path name="vecmap_creusot-rlib.mlcfg"/>
<theory name="VecmapCreusot_Impl1_FindK" proved="true">
 <goal name="find_k&#39;vc" expl="VC for find_k" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="103305"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="find_k&#39;vc.0" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="find_k&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="21"/></proof>
  </goal>
  <goal name="find_k&#39;vc.2" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="23"/></proof>
  </goal>
  <goal name="find_k&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="100"/></proof>
  </goal>
  <goal name="find_k&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="31"/></proof>
  </goal>
  <goal name="find_k&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="28"/></proof>
  </goal>
  <goal name="find_k&#39;vc.6" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="find_k&#39;vc.7" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="53"/></proof>
  </goal>
  <goal name="find_k&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="54"/></proof>
  </goal>
  <goal name="find_k&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="191"/></proof>
  </goal>
  <goal name="find_k&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="503"/></proof>
  </goal>
  <goal name="find_k&#39;vc.11" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="93"/></proof>
  </goal>
  <goal name="find_k&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.16" steps="1529"/></proof>
  </goal>
  <goal name="find_k&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="2"><result status="valid" time="0.25" steps="1276"/></proof>
  </goal>
  <goal name="find_k&#39;vc.14" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="515"/></proof>
  </goal>
  <goal name="find_k&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="558"/></proof>
  </goal>
  <goal name="find_k&#39;vc.16" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="154"/></proof>
  </goal>
  <goal name="find_k&#39;vc.17" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="457"/></proof>
  </goal>
  <goal name="find_k&#39;vc.18" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="460"/></proof>
  </goal>
  <goal name="find_k&#39;vc.19" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.38" steps="42336"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="find_k&#39;vc.20" expl="loop invariant preservation" proved="true">
  <proof prover="1"><result status="valid" time="0.32" steps="36269"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="find_k&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.44" steps="45718"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  </goal>
  <goal name="find_k&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.95" steps="4866"/></proof>
  </goal>
  <goal name="find_k&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.06" steps="539"/></proof>
  </goal>
  <goal name="find_k&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.08" steps="517"/></proof>
  </goal>
  <goal name="find_k&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.22" steps="1669"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_Entry" proved="true">
 <goal name="entry&#39;vc" expl="VC for entry" proved="true">
 <proof prover="2"><result status="valid" time="0.15" steps="654"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl12_AsRef" proved="true">
 <goal name="as_ref&#39;vc" expl="VC for as_ref" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="18"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl13_ToOwned_Impl" proved="true">
 <goal name="to_owned&#39;vc" expl="VC for to_owned" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="9"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_IsValidKeyref" proved="true">
 <goal name="is_valid_keyref&#39;vc" expl="VC for is_valid_keyref" proved="true">
 <proof prover="2"><result status="valid" time="0.97" steps="8109"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_EntryFromRef" proved="true">
 <goal name="entry_from_ref&#39;vc" expl="VC for entry_from_ref" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="127230"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="entry_from_ref&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.1" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.05" steps="228"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.2" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="54"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.3" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="60"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.4" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="75"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.5" expl="loop invariant init" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="62"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.6" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="70"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.7" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.07" steps="683"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.8" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.55" steps="4021"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.9" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="108"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.10" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="139"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.11" expl="loop invariant preservation" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="110"/></proof>
  </goal>
  <goal name="entry_from_ref&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="174916"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="entry_from_ref&#39;vc.12.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="85076"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="entry_from_ref&#39;vc.12.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="16"/></proof>
    </goal>
    <goal name="entry_from_ref&#39;vc.12.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="entry_from_ref&#39;vc.12.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="183412"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="entry_from_ref&#39;vc.12.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="16"/></proof>
    </goal>
    <goal name="entry_from_ref&#39;vc.12.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.64" steps="4379"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="entry_from_ref&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="171294"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="entry_from_ref&#39;vc.13.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="92546"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="entry_from_ref&#39;vc.13.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="16"/></proof>
    </goal>
    <goal name="entry_from_ref&#39;vc.13.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.14" steps="778"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="entry_from_ref&#39;vc.13.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="94193"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="entry_from_ref&#39;vc.13.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="16"/></proof>
    </goal>
    <goal name="entry_from_ref&#39;vc.13.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.28" steps="1822"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_FindRandomMappingAfter" proved="true">
 <goal name="find_random_mapping_after&#39;vc" expl="VC for find_random_mapping_after" proved="true">
 <proof prover="0"><result status="valid" time="0.91" steps="1165872"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="110578"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_InsertInternal" proved="true">
 <goal name="insert_internal&#39;vc" expl="VC for insert_internal" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="84840"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="insert_internal&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="61"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="124"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="64"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.04" steps="143"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.03" steps="113"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="124128"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="insert_internal&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="94952"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="0.93" steps="9073"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="insert_internal&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.39" steps="2395"/></proof>
  </goal>
  <goal name="insert_internal&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.47" steps="3265"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_Insert" proved="true">
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="2"><result status="valid" time="0.75" steps="4411"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_Remove" proved="true">
 <goal name="remove&#39;vc" expl="VC for remove" proved="true">
 <proof prover="0"><result status="timeout" time="1.00"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="103805"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="remove&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="remove&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="43"/></proof>
  </goal>
  <goal name="remove&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="181725"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="valid" time="0.18" steps="437446"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="137977"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   </goal>
   <goal name="remove&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.02" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.00"/></proof>
  <proof prover="1"><result status="timeout" time="1.00" steps="184704"/></proof>
  <proof prover="2"><result status="timeout" time="1.00"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="184915"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.3.0.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="99"/></proof>
    </goal>
    <goal name="remove&#39;vc.3.0.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="24"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="remove&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.00"/></proof>
   <proof prover="1"><result status="timeout" time="1.00" steps="93781"/></proof>
   <proof prover="2"><result status="timeout" time="1.00"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="remove&#39;vc.3.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="90"/></proof>
    </goal>
    <goal name="remove&#39;vc.3.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="24"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.41" steps="2536"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_Get" proved="true">
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="2"><result status="valid" time="0.10" steps="522"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_ContainsKey" proved="true">
 <goal name="contains_key&#39;vc" expl="VC for contains_key" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="149"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_NextMapping" proved="true">
 <goal name="next_mapping&#39;vc" expl="VC for next_mapping" proved="true">
 <proof prover="0"><result status="valid" time="0.56" steps="1207094"/></proof>
 <proof prover="1"><result status="timeout" time="1.00" steps="111415"/></proof>
 <proof prover="2"><result status="timeout" time="1.00"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_MinEntry" proved="true">
 <goal name="min_entry&#39;vc" expl="VC for min_entry" proved="true">
 <proof prover="2"><result status="valid" time="0.08" steps="444"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl1_MaxKey" proved="true">
 <goal name="max_key&#39;vc" expl="VC for max_key" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="222"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl2_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl3_Default" proved="true">
 <goal name="default&#39;vc" expl="VC for default" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="18"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl7_Insert" proved="true">
 <goal name="insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="2"><result status="valid" time="0.55" steps="3230"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl9_Replace" proved="true">
 <goal name="replace&#39;vc" expl="VC for replace" proved="true">
 <proof prover="2"><result status="valid" time="0.34" steps="1680"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl9_GetMut" proved="true">
 <goal name="get_mut&#39;vc" expl="VC for get_mut" proved="true">
 <proof prover="2"><result status="valid" time="0.27" steps="1436"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl17_Clone" proved="true">
 <goal name="clone&#39;&#39;vc" expl="VC for clone&#39;" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="18"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl2" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="2"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl17" proved="true">
 <goal name="Clone1.clone&#39;&#39;refn&#39;vc" expl="VC for clone&#39;&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="VecmapCreusot_Impl3" proved="true">
 <goal name="Default1.default&#39;refn&#39;vc" expl="VC for default&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="2"/></proof>
 </goal>
</theory>
</file>
</why3session>
